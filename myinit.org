#+TITLE: Mike Zamansky's Emacs configuration
#+STARTUP: overview
#+OPTIONS: toc:4 h:4
Use tab on each section to cycle through expanding and hiding sections
* Notes
** Thanks
Most of this file was taken from Sacha Chua's configuration. She's
shared tons of really awesome emacs stuff and I'd encourage everyone
to google her and check out her work.

** First time
use M-x package-refresh-contents the first time you load this, then
exit emacs and start again.

Also do this when you change package sources.
** Commenting out sections
You can copy sections to your own myinit.org but if you want to use
this and "comment out" chunks, the easiest w
ay is to add ":tangle no"
to the end of the begin_src lines -- see the init.el section for 
an example 
** To install pcackages automatically use
#+begin_src emacs-lisp :tangle no
  (use-package smart-mode-line
    :ensure smart-mode-line
    :init 
    (progn
      (setq sml/no-confirm-load-theme t)
      (sml/setup)
      (sml/apply-theme 'powerline)
      ))
#+end_src

* TO INSTALL LATER
- Multiple Cursors
- Expand
- Avy - need to config hot key for ace-jump equiv
- Hydra - installed look at config
- endless parens dwim narrow
* The init.el

The content between the begin_src and end_src should
be written to a file named init.el in your .emacs.d directory
the other file you should place there is this file (myinit.org)

It will load when emacs starts and then it will run everything in 
this file

#+begin_src emacs-lisp :tangle no
  (package-initialize nil)
(add-to-list 'load-path "~/.emacs.d/packages/lisp")
  (require 'package)

  ;(add-to-list 'package-archives
  ;             '("melpa" . "http://melpa.milkbox.net/packages/") t)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives
               '("gnu" . "http://elpa.gnu.org/packages/") t)

  ;; Override the packages with the git version of Org and other packages
  (package-initialize t)
  (setq package-enable-at-startup nil)
  (require 'org)
  (require 'ob-tangle)
  (org-babel-load-file (expand-file-name "~/.emacs.d/myinit.org"))

  (custom-set-variables
   '(inhibit-startup-screen t))
#+end_#+begin_src language

#+end_src

* Basic Configu ation and setup
** Secrets 
Stuff we don't want on github.
#+begin_src emacs-lisp
(load "~/.emacs.secrets" t)
#+end_src

** Personal info
#+begin_src emacs-lisp
  (setq user-full-name "Mike Zamansky"
        user-mail-address "zamansky@gmail.com")
#+end_src
** Install Package routine

Taken from Sacha Chua's config.

#+begin_src emacs-lisp
(defun sacha/package-install (package &optional repository)
  "Install PACKAGE if it has not yet been installed.
If REPOSITORY is specified, use that."
  (unless (package-installed-p package)
    (let ((package-archives (if repository
                                (list (assoc repository package-archives))
                              package-archives)))
    (package-install package))))
(sacha/package-install 'use-package)
(require 'use-package)
#+end_src
* General Configuration
*** Misc interface settings
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
; periodically automatically revert to what's on disk 
; this makes it easier to keep files using btsync or dropbox
; in sync since I frequently forget to save them
(global-auto-revert-mode 1)
(setq auto-revert-verbose nil)
(global-set-key (kbd "<f5>") 'revert-buffer)

(tool-bar-mode -1)

#+end_src
*** Hungry Delete
#+begin_src emacs-lisp
(use-package hungry-delete
:ensure t
:config (global-hungry-delete-mode))


#+end_src

*** Hydra
#+begin_src emacs-lisp
  (use-package hydra
  :ensure hydra
  :init (progn

          (global-set-key
           (kbd "C-x t")
           (defhydra toggle (:color blue)
             "toggle"
             ("a" abbrev-mode "abbrev")
             ("d" toggle-debug-on-error "debug")
             ("f" auto-fill-mode "fill")
             ("t" toggle-truncate-lines "truncate")
             ("w" whitespace-mode "whitespace")
             ("q" nil "cancel")))
          (global-set-key
           (kbd "C-x g")
           (defhydra gotoline 
               ( :pre (linum-mode 1)
                      :post (linum-mode -1))
             "goto"
             ("t" (lambda () (interactive)(move-to-window-line-top-bottom 0)) "top")
             ("b" (lambda () (interactive)(move-to-window-line-top-bottom -1)) "bottom")
             ("m" (lambda () (interactive)(move-to-window-line-top-bottom)) "middle")
             ("c" recenter-top-bottom "recenter")
             ("n" next-line "down")
             ("p" (lambda () (interactive) (forward-line -1))  "up")
             ("g" goto-line "goto-line")
             ))
          (global-set-key
           (kbd "C-x w")
           (defhydra hydra-window ()
             "window"
             ("h" windmove-left)
             ("j" windmove-down)
             ("k" windmove-up)
             ("l" windmove-right)
             ("a" (lambda ()
                    (interactive)
                    (ace-window 1)
                    (add-hook 'ace-window-end-once-hook
                              'hydra-window/body)
                    (throw 'hydra-disable t))
              "ace")
             ("v" (lambda ()
                    (interactive)
                    (split-window-right)
                    (windmove-right))
              "vert")
             ("x" (lambda ()
                    (interactive)
                    (split-window-below)
                    (windmove-down))
              "horz")
             ("s" (lambda ()
                    (interactive)
                    (ace-window 4)
                    (add-hook 'ace-window-end-once-hook
                              'hydra-window/body)
                    (throw 'hydra-disable t))
              "swap")
             ("t" transpose-frame "'")
             ("d" (lambda ()
                    (interactive)
                    (ace-window 16)
                    (add-hook 'ace-window-end-once-hook
                              'hydra-window/body)
                    (throw 'hydra-disable t))
              "del")
             ("o" delete-other-windows "one" :color blue)
             ("i" ace-maximize-window "ace-one" :color blue)
             ("q" nil "cancel")))))
#+end_src

#+RESULTS:

*** Help - guide-key

It's hard to remember keyboard shortcuts. The =guide-key= package pops up help after a short delay.

#+begin_src emacs-lisp
;; (sacha/package-install 'guide-key)

(use-package guide-key
:ensure t
  :config
(progn
  (setq guide-key/guide-key-sequence '("C-x r" "C-x 4" "C-c" "C-c p"))
  (guide-key-mode 1)))  ; Enable guide-key-mode
#+end_src

#+RESULTS:
: t

*** Mode line format

Display a more compact mode line

#+begin_src emacs-lisp
(use-package      smart-mode-line-powerline-theme
    :ensure smart-mode-line-powerline-theme)
  (use-package smart-mode-line
    :ensure smart-mode-line
    :init 
    (progn
    (setq sml/no-confirm-load-theme t)
    (sml/setup)
    (sml/apply-theme 'powerline))
)

#+end_src

#+RESULTS:
: Could not load package smart-mode-line

Hide minor modes I care less about:

#+begin_src emacs-lisp
(require 'diminish)
(eval-after-load "yasnippet" '(diminish 'yas-minor-mode))
(eval-after-load "undo-tree" '(diminish 'undo-tree-mode))
(eval-after-load "guide-key" '(diminish 'guide-key-mode))
(eval-after-load "smartparens" '(diminish 'smartparens-mode))
(eval-after-load "guide-key" '(diminish 'guide-key-mode))
(eval-after-load "eldoc" '(diminish 'eldoc-mode))
(diminish 'visual-line-mode)
#+end_src


#+RESULTS:
|

*** Change "yes or no" to "y or n"

Lazy people like me never want to type "yes" when "y" will suffice.

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)   
#+end_src

*** Theme
#+BEGIN_SRC emacs-lisp
  ;(set-background-color "Oldlace")
  ;(setq default-frame-alist
  ;     '((background-color . "Oldlace")
  ;        ))
  
;  (sacha/package-install 'color-theme)
;  (use-package diff-mode)
;  (use-package color-theme
;   :init (progn
;           (color-theme-initialize)
;           (color-theme-subtle-hacker)
;           ))
  
(sacha/package-install 'color-theme)
(sacha/package-install 'zenburn-theme)
(load-theme 'zenburn t)
#+END_SRC
*** Undo tree mode - visualize your undos and branches

People often struggle with the Emacs undo model, where there's really no concept of "redo" - you simply undo the undo. 
# 
This lets you use =C-x u= (=undo-tree-visualize=) to visually walk through the changes you've made, undo back to a certain point (or redo), and go down different branches.

#+begin_src emacs-lisp
(sacha/package-install 'undo-tree)
  (use-package undo-tree
    :init
    (progn
      (global-undo-tree-mode)
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t)))
#+end_src

#+RESULTS:
: t

*** UTF-8

From http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html
#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src

* Navigation
** Swiper
#+begin_src emacs-lisp
(use-package swiper
:ensure t
:init
(progn
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(global-set-key "\C-s" 'swiper)
(global-set-key "\C-r" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key [f6] 'ivy-resume)
))

#+end_src

#+RESULTS:

** Avy
I'm not sure if I like this package - I have to check it out more but
it's out of the way here
#+begin_src emacs-lisp
(use-package avy
:ensure t
:init
(progn
(avy-setup-default)
))
#+end_src

#+RESULTS:

** Pop to mark

Handy way of getting back to previous places.

#+begin_src emacs-lisp
(bind-key "C-x p" 'pop-to-mark-command)
(setq set-mark-command-repeat-pop t)
#+end_src

** Ace-windows
#+BEGIN_SRC emacs-lisp
(sacha/package-install 'ace-window)
(use-package ace-window
:ensure t
:init 
(progn
(global-set-key [remap other-window] 'ace-window)

(custom-set-faces
 '(aw-leading-char-face
   ((t (:inherit ace-jump-face-foreground :height 3.0)))))
))
#+END_SRC

#+RESULTS:


** Browse-kill-ring - see what you've cut so that you can paste it       
Make sense of the kill ring! This lets you list the contents of the
kill ring and paste a specific item. You can also manipulate your kill
ring contents.

If you're new to Emacs, you might not yet know about what the kill
ring is. It stores the items that you cut (or kill, in Emacs terms).
You're not limited to pasting just the most recent item - you can
paste the second-to-the-last item you cut, and so on. I remember to
use =C-y= and =M-y= when going backwards in the kill ring, but I never
quite remember how to go forward, so browse-kill-ring makes it easier.

#+begin_src emacs-lisp
  (sacha/package-install 'browse-kill-ring)
  (use-package browse-kill-ring
    :init 
    (progn 
      (browse-kill-ring-default-keybindings) ;; M-y
      (setq browse-kill-ring-quit-action 'save-and-restore)))      
#+end_src

#+RESULTS:
: t
** visual-regexp
#+begin_src emacs-lisp
(sacha/package-install 'visual-regexp)
(use-package visual-regexp)
#+end_src
* Markdown 
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
:ensure t)

#+END_SRC

#+RESULTS:

* Org
** Variables
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
'(org-agenda-files (quote ("~/btsync/orgfiles/")))
'(org-default-notes-file (concat org-directory "/notes.org"))
'(org-directory "~/btsync/orgfiles")
'(org-export-html-postamble nil)
'(org-hide-leading-stars t)
'(org-startup-folded (quote content))
'(org-startup-indented t)
   )

  (setq org-file-apps
        (append '(
                  ("\\.pdf\\'" . "evince %s")
                  ) org-file-apps ))

#+END_SRC   

#+RESULTS:
** Babel
#+begin_src emacs-lisp
(sacha/package-install 'ob-mongo)
(use-package ob-mongo
  :init
(progn
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (emacs-lisp . t)
   (scheme . t )
   (java . t )
   (mongo . t )
   (ditaa . t)
   (dot . t)
   (org . t)
   (gnuplot . t )
   (sh . t )
   (haskell . t )
   (latex . t )
   ))))
#+end_src
** GnuPlot (for babel)
#+begin_src emacs-lisp
(use-package gnuplot
:ensure t)
#+end_src
** Publish
#+begin_src emacs-lisp
(setq org-publish-project-alist
      '(
           ("blog-posts"
		:base-directory "~/gh/cestlaz.github.io/_org/"
      		:base-extension "org"
		:publishing-directory "~/gh/cestlaz.github.io/_drafts/"
		:recursive nil		      
;      		:publishing-function org-publish-org-to-html
      		:publishing-function org-html-publish-to-html
      		:headline-levels 4
		:auto-index nil
		:htmlized-source t
		:section-numbers nil
		:toc nil
      		:auto-preamble nil
		:table-of-contents nil
		:html-extension "html"		
		:body-only t
      		)
           ("apcs-hw"
		:base-directory "~/gh/stuycs-apcs-z.github.io/_org/"
      		:base-extension "org"
		:publishing-directory "~/gh/stuycs-apcs-z.github.io/_posts/"
		:recursive nil		      
;      		:publishing-function org-publish-org-to-html
      		:publishing-function org-html-publish-to-html
      		:headline-levels 4
		:auto-index nil
		:section-numbers nil
		:toc nil
      		:auto-preamble nil
		:table-of-contents nil
		:html-extension "html"		
		:body-only t
      		))

      )
#+end_src
** reveal
#+begin_src emacs-lisp
(setq org-reveal-mathjax t)

(use-package ox-reveal
:ensure ox-reveal)

#+end_src

* latex
#+begin_src emacs-lisp
(defun tex-view ()
    (interactive)
    (tex-send-command "evince" (tex-append tex-print-file ".pdf")))

#+end_src

* Programming
** Misc
#+begin_src emacs-lisp
(setq-default tab-width 2)
#+end_src
** smartparens
#+BEGIN_SRC emacs-lisp

(use-package smartparens
:ensure smartparens
:config 
(progn
(require 'smartparens-config)
(require 'smartparens-html)
(require 'smartparens-python)
(require 'smartparens-latex)
(smartparens-global-mode t)
))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
:ensure t
:init
(progn
(bind-key "C-x g" 'magit-status)
))
#+END_SRC

#+RESULTS:

** Autocomplete
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
:ensure t
:init
(progn
(ac-config-default)
(global-auto-complete-mode t)
))


#+END_SRC

#+RESULTS:

** yasnippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
:ensure t
:init
(progn
(yas-global-mode 1)
)
)
#+END_SRC

#+RESULTS:

** Aggresive indent
#+begin_src emacs-lisp
(use-package aggressive-indent
:ensure t
:init (progn
  (global-aggressive-indent-mode 1)
)
)

#+end_src
** Rainbow delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
:ensure t
  :init (rainbow-delimiters-mode))
#+end_src
** projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
:ensure t
:init (progn
(projectile-global-mode)
(setq projectile-completion-system 'ivy)
))

#+END_SRC

#+RESULTS:

** Flycheck
#+begin_src emacs-lisp
(use-package flycheck 
:ensure t
:init
(global-flycheck-mode t))
(use-package flycheck-pyflakes
:ensure t
)
#+end_src
** Python
#+BEGIN_SRC emacs-lisp
(use-package jedi
:ensure t
:init
(progn
(add-hook 'python-mode-hook 'jedi:setup)
(add-hook 'python-mode-hook 'jedi:ac-setup)
))
#+END_SRC

#+RESULTS:

** Web
#+BEGIN_SRC emacs-lisp
(use-package web-mode
:ensure t
:init
(progn
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("/some/react/path/.*\\.js[x]?\\'" . web-mode))

(setq web-mode-content-types-alist
  '(("json" . "/some/path/.*\\.api\\'")
    ("xml"  . "/other/path/.*\\.api\\'")
    ("jsx"  . "/some/react/path/.*\\.js[x]?\\'")))
))

(use-package js2-mode
:ensure t
:init
(progn
(add-hook 'js-mode-hook 'js2-minor-mode)
(add-hook 'js2-mode-hook 'ac-js2-mode)
))

#+END_SRC

#+RESULTS:

** Clojure
#+BEGIN_SRC emacs-lisp
(use-package cider
:ensure cider
:ensure ac-cider
)


#+END_SRC

#+RESULTS:

* Key binding
#+begin_src emacs-lisp


(global-set-key (kbd "\e\ei")
		(lambda () (interactive) (find-file "~/btsync/orgfiles/i.org")))

(global-set-key (kbd "\e\ea")
		(lambda () (interactive) (find-file "~/btsync/orgfiles/apcs.org")))

(global-set-key (kbd "\e\es")
		(lambda () (interactive) (find-file "~/btsync/orgfiles/softdev.org")))
(global-set-key (kbd "\e\ec")
		(lambda () (interactive) (find-file "~/btsync/orgfiles/cstuy.org")))

#+end_src
* Misc			  
** edit-server for edit with emacs
#+begin_src emacs-lisp
(use-package edit-server
:ensure t
  :init (edit-server-start)
)
#+end_src

#+RESULTS:
: t
